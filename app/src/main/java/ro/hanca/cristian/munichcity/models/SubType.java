package ro.hanca.cristian.munichcity.models;

import java.util.List;
import ro.hanca.cristian.munichcity.models.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "SubType".
 */
public class SubType {

    private Long id;
    private Long TypeId;
    private String Name;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SubTypeDao myDao;

    private Type Type;
    private Long Type__resolvedKey;

    private List<POI> Entries;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public SubType() {
    }

    public SubType(Long id) {
        this.id = id;
    }

    public SubType(Long id, Long TypeId, String Name) {
        this.id = id;
        this.TypeId = TypeId;
        this.Name = Name;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSubTypeDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getTypeId() {
        return TypeId;
    }

    public void setTypeId(Long TypeId) {
        this.TypeId = TypeId;
    }

    public String getName() {
        return Name;
    }

    public void setName(String Name) {
        this.Name = Name;
    }

    /** To-one relationship, resolved on first access. */
    public Type getType() {
        Long __key = this.TypeId;
        if (Type__resolvedKey == null || !Type__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TypeDao targetDao = daoSession.getTypeDao();
            Type TypeNew = targetDao.load(__key);
            synchronized (this) {
                Type = TypeNew;
            	Type__resolvedKey = __key;
            }
        }
        return Type;
    }

    public void setType(Type Type) {
        synchronized (this) {
            this.Type = Type;
            TypeId = Type == null ? null : Type.getId();
            Type__resolvedKey = TypeId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<POI> getEntries() {
        if (Entries == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            POIDao targetDao = daoSession.getPOIDao();
            List<POI> EntriesNew = targetDao._querySubType_Entries(id);
            synchronized (this) {
                if(Entries == null) {
                    Entries = EntriesNew;
                }
            }
        }
        return Entries;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetEntries() {
        Entries = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
