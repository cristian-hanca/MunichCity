package ro.hanca.cristian.munichcity.models;

import ro.hanca.cristian.munichcity.models.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "POI".
 */
public class POI {

    private Long id;
    private Long SubTypeId;
    private Double Lat;
    private Double Lon;
    private String Name;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient POIDao myDao;

    private SubType SubType;
    private Long SubType__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public POI() {
    }

    public POI(Long id) {
        this.id = id;
    }

    public POI(Long id, Long SubTypeId, Double Lat, Double Lon, String Name) {
        this.id = id;
        this.SubTypeId = SubTypeId;
        this.Lat = Lat;
        this.Lon = Lon;
        this.Name = Name;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPOIDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getSubTypeId() {
        return SubTypeId;
    }

    public void setSubTypeId(Long SubTypeId) {
        this.SubTypeId = SubTypeId;
    }

    public Double getLat() {
        return Lat;
    }

    public void setLat(Double Lat) {
        this.Lat = Lat;
    }

    public Double getLon() {
        return Lon;
    }

    public void setLon(Double Lon) {
        this.Lon = Lon;
    }

    public String getName() {
        return Name;
    }

    public void setName(String Name) {
        this.Name = Name;
    }

    /** To-one relationship, resolved on first access. */
    public SubType getSubType() {
        Long __key = this.SubTypeId;
        if (SubType__resolvedKey == null || !SubType__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SubTypeDao targetDao = daoSession.getSubTypeDao();
            SubType SubTypeNew = targetDao.load(__key);
            synchronized (this) {
                SubType = SubTypeNew;
            	SubType__resolvedKey = __key;
            }
        }
        return SubType;
    }

    public void setSubType(SubType SubType) {
        synchronized (this) {
            this.SubType = SubType;
            SubTypeId = SubType == null ? null : SubType.getId();
            SubType__resolvedKey = SubTypeId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
